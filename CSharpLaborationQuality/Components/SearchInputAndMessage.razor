@using BlazorClassLibrary
@using BlazorClassLibrary.Collections
@rendermode InteractiveServer

<div class="input-container">
	<input style="font-family: Georgia; width:20rem;" @bind-value="SearchTerm" @oninput="SearchForUser" placeholder="Search for users name" class="styled-input" />
<p style="font-family: Georgia; font-weight: 500;">@TextMessage</p>
</div>

@code {
	[Parameter]
	public EventCallback<string> SearchTermChanged { get; set; }
	[Parameter]
	public EventCallback<string> TextMessageChanged { get; set; }
	[Parameter]
	public List<User> Users { get; set; } = [];
	[Parameter]
	public EventCallback<List<User>> FilteredUsersChanged { get; set; }
	[Parameter]
	public int AmountOfUsers { get; set; }
	[Parameter]
	public EventCallback<bool> SearchingChanged { get; set; }
	[Parameter]
	public EventCallback<int> UsersLeftToShowChanged { get; set; }
	public int UsersLeftToShow;

	public bool Searching;
	public string? SearchTerm;
	public List<User>? FilteredUsers;
	public string? TextMessage;

	private void SearchForUser(ChangeEventArgs e)
	{
		Searching = true;
		SearchingChanged.InvokeAsync(Searching);
		SearchTerm = e.Value?.ToString() ?? "";
		SearchTermChanged.InvokeAsync(SearchTerm);
		if (!Users.Any())
		{
			TextMessage = "Nothing found!";
			TextMessageChanged.InvokeAsync(TextMessage);
		}
		else if (SearchTerm==string.Empty)
		{
			Searching = false;
			SearchingChanged.InvokeAsync(Searching);
			FilteredUsers = Users.Take(AmountOfUsers).ToList();
			UsersLeftToShow = Users.Count - FilteredUsers.Count;
			UsersLeftToShowChanged.InvokeAsync(UsersLeftToShow);
			FilteredUsersChanged.InvokeAsync(FilteredUsers);
			TextMessage = $"";
			TextMessageChanged.InvokeAsync(TextMessage);
		}
		else
		{
			FoundUser();
		}
	}
	public void FoundUser()
	{
		if (!string.IsNullOrEmpty(SearchTerm))
		{
			FilteredUsers = Users.Where(item => item.Name.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
			FilteredUsersChanged.InvokeAsync(FilteredUsers);
			UsersLeftToShow = Users.Count - FilteredUsers.Count;
			UsersLeftToShowChanged.InvokeAsync(UsersLeftToShow);
		}
		
		if (FilteredUsers != null)
		{
			if (FilteredUsers.Count > 0)
			{
				ListBiggerThanZero();
			}
			else
			{
				TextMessage = $"No users found with the term '{SearchTerm}'";
				TextMessageChanged.InvokeAsync(TextMessage);
			}
		}
	}
	public void ListBiggerThanZero()
	{
		if (SearchTerm == String.Empty)
		{
			TextMessage = "";
			TextMessageChanged.InvokeAsync(TextMessage);
		}
		else
		{
			TextMessage = $"Following users found with the term '{SearchTerm}'";
			TextMessageChanged.InvokeAsync(TextMessage);
		}
	}
}
