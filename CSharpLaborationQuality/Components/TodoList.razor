@using BlazorClassLibrary
@using BlazorClassLibrary.Collections
@using BlazorClassLibrary.Services
@inject ITodoService _todoService
@using CSharpLaborationQuality.Components.Shared
@using System.Text.Json
@rendermode InteractiveServer

<h3>TodoList for @SpecificUser.Name</h3>

<div class="border" style="padding: 20px;">
    <h4>New Item</h4>
    <ToDoItemForm SpecificUser="SpecificUser" OnItemAdded="@ItemsChanged" />

</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
    <div style="display:flex; flex-direction: column;">
        @foreach (var todo in SpecificUser.TodoService.TodoItems)
        {
            <div style="display:flex; margin-bottom: 10px;">
                <div style="display:flex; align-items: center; margin-bottom: 10px;">
                    <div class="@ItemClass(todo)" style="width: 280px;">@todo.Text</div>
                </div>
                
                @if (todo.Completed)
                {
                    <div style=" width: 120px;">
                        <button class="btn btn-primary" @onclick="@(() => IncompleteItem(todo))">Incomplete</button>
                    </div>
                }
                @if (!todo.Completed)
                {
                    <div style=" width: 120px;">
                        <button class="btn btn-primary" @onclick="@(() => CompleteItem(todo))">Complete</button>
                    </div>
                }
                <div>
                    <button class="btn btn-danger" @onclick="() => DeleteItem(todo)">Delete</button>
                </div>
            </div>
        }
    </div>
</div>

<button @onclick="UpdateList">Save</button>


<button @onclick="UpdatePage">Back</button>

@Message

@code {
    [Parameter]
    public User SpecificUser { get; set; }
    [Parameter]
    public List<User> Users { get; set; } = new();
    [Parameter]
    public EventCallback<bool> IfShowTodoListChanged { get; set; }
    public bool IfShowTodoList;

    private IList<TodoItem> Todos { get; set; } = new List<TodoItem>();
    private string Message = "";

    protected override void OnInitialized()
    {
        Todos = _todoService.GetAll().ToList();
    }
    private void UpdatePage()
    {
        IfShowTodoList = false;
        IfShowTodoListChanged.InvokeAsync(IfShowTodoList);
    }
    private async Task UpdateList()
    {
        Message = "Saved!";
        var json = JsonSerializer.Serialize<List<User>>(Users,new JsonSerializerOptions{WriteIndented=true});
        File.WriteAllText("List_Of_People_Save.json", json);
        await Task.Delay(2000);
        Message = string.Empty;
        StateHasChanged();
    }

    public string ItemClass(TodoItem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    public void ItemsChanged()
    {
        Todos = _todoService.GetAll().ToList();
        StateHasChanged();
    }

    public void DeleteItem(TodoItem item)
    {
        _todoService.Delete(item);
        ItemsChanged();
    }

    public void CompleteItem(TodoItem item)
    {
        _todoService.Complete(item);
        ItemsChanged();
    }

    public void IncompleteItem(TodoItem item)
    {
        _todoService.Incomplete(item);
        ItemsChanged();
    }
}
