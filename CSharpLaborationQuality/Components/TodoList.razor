@using BlazorClassLibrary
@using BlazorClassLibrary.Collections
@using BlazorClassLibrary.Services
@inject ITodoService _todoService
@using CSharpLaborationQuality.Components.Shared
@using System.Text.Json
@rendermode InteractiveServer

<h3 class="animated-header" style="align-content:center;">@SpecificUser.Name's to do list!</h3>
<div class="border" style="padding: 20px;">
    <h4 style="padding-left:6rem;">New Item</h4>
    <ToDoItemForm SpecificUser="SpecificUser" OnItemAdded="@ItemsChanged"/>
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
    <div style="display:flex; flex-direction: column;">

        @foreach (var todo in SpecificUser.TodoService.TodoItems)
        {
            <div style="display:flex; margin-bottom: 10px; font-weight:bold;">
                <div style="display:flex; align-items: center; margin-bottom: 10px;">
                    
                    @if (SpecificItem == todo && IfEdit)
                    {
                        <div style="display: flex; align-items: center;">
                            <EditForm Model="@SpecificItem" FormName="ToEditItem" OnSubmit="@ItemAdded" style="display: flex; align-items: center;">
                                <InputText @bind-Value="SpecificItem.Text" class="form-control" style="margin-right: 10px; width: auto;" id="Item" />
                                <button type="submit" class="btn btn-primary">Save</button>
                            </EditForm>
                        </div>
                    }
                    else
                    {
                    <div class="@ItemClass(todo)" style="width: 180px;">@todo.Text</div>
                        @if (todo.Completed)
                        {
                            <div style=" width: 120px;">
                                <button class="btn btn-primary" @onclick="@(() => IncompleteItem(todo))">Incomplete</button>
                            </div>
                        }
                        @if (!todo.Completed)
                        {
                            <div style=" width: 120px;">
                                <button class="btn btn-primary" @onclick="@(() => CompleteItem(todo))">Complete</button>
                            </div>
                        }
                        <div>
                            <button class="btn btn-danger" @onclick="() => DeleteItem(todo)">Delete</button>
                        </div>

                        <div style="padding-left:1rem;">
                            <button class="btn btn-primary" @onclick="() => EditItem(todo)">Edit</button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>
<br />
<div style="padding-left:0rem;">
    <button style="background-color: greenyellow; color:black; font-weight:bold;" class="btn btn-primary" @onclick="UpdateList">Save</button>


    <button style="background-color: aqua; color:black; font-weight:bold; " class="btn btn-primary" @onclick="UpdatePage">Go back</button>
</div>
@Message

@code {
    [Parameter]
    public User SpecificUser { get; set; }
    [Parameter]
    public List<User> Users { get; set; } = new();
    [Parameter]
    public EventCallback<bool> IfShowTodoListChanged { get; set; }
    private TodoItem SpecificItem { get; set; }
    public bool IfShowTodoList;
    private bool IfEdit = false;
    private IList<TodoItem> Todos { get; set; } = new List<TodoItem>();
    private string Message = "";
    private TodoItem NewItem = new TodoItem("");
    public required Action OnItemAdded { get; set; }

    public void ItemAdded()
    {
        if (SpecificItem != null && SpecificUser.TodoService.TodoItems.Contains(SpecificItem))
        {
            var existingItem = SpecificUser.TodoService.TodoItems.FirstOrDefault(item => item == SpecificItem);
            if (existingItem != null)
            {
                existingItem.Text = SpecificItem.Text;
            }
            IfEdit = false;
            SpecificItem = null;
        }
        else
        {
            var newItem = new TodoItem(NewItem.Text);
            NewItem.Text = "";
            SpecificUser.TodoService.TodoItems.Add(newItem);
        }
        ItemsChanged();
    }
    protected override void OnInitialized()
    {
        Todos = _todoService.GetAll().ToList();
    }
    private void UpdatePage()
    {
        IfShowTodoList = false;
        IfShowTodoListChanged.InvokeAsync(IfShowTodoList);
    }
    private async Task UpdateList()
    {
        Message = "Saved!";
        var json = JsonSerializer.Serialize<List<User>>(Users,new JsonSerializerOptions{WriteIndented=true});
        File.WriteAllText("List_Of_People_Save.json", json);
        await Task.Delay(2000);
        Message = string.Empty;
        StateHasChanged();
    }
    public void EditItem(TodoItem item)
    {
        SpecificItem = item; // Set the clicked item as the current specific item.
        IfEdit = true;       // Enable editing mode.
    }
    public string ItemClass(TodoItem item)
    {
        return item.Completed ? "item-completed" : "";
    }

    public void ItemsChanged()
    {
        Todos = _todoService.GetAll().ToList();
        StateHasChanged();
    }

    public void DeleteItem(TodoItem item)
    {
        SpecificUser.TodoService.TodoItems.Remove(item);
        ItemsChanged();
    }

    public void CompleteItem(TodoItem item)
    {
        _todoService.Complete(item);
        ItemsChanged();
    }

    public void IncompleteItem(TodoItem item)
    {
        _todoService.Incomplete(item);
        ItemsChanged();
    }

}
