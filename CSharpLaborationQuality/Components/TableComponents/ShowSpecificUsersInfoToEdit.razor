@using BlazorClassLibrary
@using System.Text.Json

<EditForm Model="@SpecificUser" OnValidSubmit="@HandleValidSubmit" FormName="EditUserForm">
    <DataAnnotationsValidator />

    <div class="accordion-flush" style="font-family: Georgia; font-weight: bold; font-size: 1.5rem;">
        <span style="color: black; font-size: 2rem;">User's id:</span>
        <span style="color: #333; font-size: 2.5rem; font-style: italic; text-shadow: 2px 2px 5px rgba(0,0,0,0.3); transition: color 0.3s ease-in-out;"
              onmouseover="this.style.color='#8a2be2'" onmouseout="this.style.color='#333'">
            @SpecificUser.Id
        </span>
    </div>

    <div style="font-family: Georgia; font-weight: bold;" class="accordion-flush">
        <label for="Name" style="font-size: 1.2rem; display: block; margin-bottom: 5px;">Name</label>
        <InputText id="Name" @bind-Value="@SpecificUser.Name" class="form-control" />
        <ValidationMessage For="@(() => SpecificUser.Name)" />
    </div>

    <div style="font-family: Georgia; font-weight: bold;" class="accordion-flush">
        <label for="Age" style="font-size: 1.2rem; display: block; margin-bottom: 5px;">Age</label>
        <InputNumber id="Age" @bind-Value="@SpecificUser.Age" class="form-control" />
        <ValidationMessage For="@(() => SpecificUser.Age)" />
    </div>

    <div style="font-family: Georgia; font-weight: bold;" class="accordion-flush">
        <label for="UserName" style="font-size: 1.2rem; display: block; margin-bottom: 5px;">Username</label>
        <InputText id="UserName" @bind-Value="@SpecificUser.UserName" class="form-control" />
        <ValidationMessage For="@(() => SpecificUser.UserName)" />
    </div>

    <div style="font-family: Georgia; font-weight: bold;" class="accordion-flush">
        <label for="Email" style="font-size: 1.2rem; display: block; margin-bottom: 5px;">Email</label>
        <InputText id="Email" @bind-Value="@SpecificUser.Email" class="form-control" />
        <ValidationMessage For="@(() => SpecificUser.Email)" />
    </div>

    <div style="font-family: Georgia; font-weight: bold;" class="accordion-flush">
        <label for="City" style="font-size: 1.2rem; display: block; margin-bottom: 5px;">City</label>
        <InputText id="City" @bind-Value="@SpecificUser.Address.City" class="form-control" />
        <ValidationMessage For="@(() => SpecificUser.Address.City)" />
    </div>

    <div style="font-family: Georgia; font-weight: bold;" class="accordion-flush">
        <label for="CompanyName" style="font-size: 1.2rem; display: block; margin-bottom: 5px;">Company Name</label>
        <InputText id="CompanyName" @bind-Value="@SpecificUser.Company.Name" class="form-control" />
        <ValidationMessage For="@(() => SpecificUser.Company.Name)" />
    </div>

    <br /><br />
    <button class="btn btn-primary">Save changes</button>
    <button @onclick="GoBackToTable" class="btn btn-primary">Back</button>
</EditForm>
@Message

@code {
    [Parameter]
    public User SpecificUser { set; get; } = new();
    [Parameter]
    public List<User> Users { get; set; } = new();
    [Parameter]
    public EventCallback<bool> IfEditUserChanged { get; set; }
    public bool IfEditUser = true;
    private string Message = "";

    private void HandleValidSubmit()
    {
        Message = "Changes were saved!";
        var json = JsonSerializer.Serialize<List<User>>(Users, new JsonSerializerOptions { WriteIndented = true });
        File.WriteAllText("List_Of_People_Save.json", json);
        IfEditUser = false;
        IfEditUserChanged.InvokeAsync(IfEditUser);
    }

    private void GoBackToTable()
    {
        IfEditUser = false;
        IfEditUserChanged.InvokeAsync(IfEditUser);
    }
}
