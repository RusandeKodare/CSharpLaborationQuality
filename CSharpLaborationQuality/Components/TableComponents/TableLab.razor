@using BlazorClassLibrary
@using BlazorClassLibrary.Collections
@using System.Text.Json
@using BlazorClassLibrary.Collections.Interfaces
@rendermode InteractiveServer
@if (!IfShowToDoList && !IfEditUser)
{
    <NavLink class="nav-link" href="ChooseSource">
        <button class="btn btn-primary">Choose new source</button>
    </NavLink>
   
    <div style="padding-bottom:2rem; display:flex; justify-content:center; align-items: center;" class="button-container">
        @if (!_ifShowAllUsers && !_saveToList && Users.Count > 5 && !Searching)
        {
           @*  <button @onclick="IncreaseAmountOfUsers">Show more</button>
 *@
            @if (Users.Count > 5)
            {
                <button @onclick="ShowAllUsers">Show all</button>
            }
        }
        @if ((_ifShowAllUsers || FilteredUsers.Count > 5) && !Searching && !_ifRemoveUser)
        {
            <button @onclick="ShowOnlyFiveUsers">Show less</button>
        }

    </div>
    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th class="clickable-header" style="cursor: pointer; font-weight: 500; background-color: aliceblue; width: 100px;" @onclick="() => FilteredUsers = sortingCollection.SortByID(FilteredUsers)">
                    Id <img style="width: 20px; height: 20px; margin-left: 10px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color: aliceblue; " @onclick="()=> FilteredUsers = sortingCollection.SortByName(FilteredUsers)">
                    Name <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = sortingCollection.SortByUserName(FilteredUsers)">
                    Username <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = sortingCollection.SortByEmail(FilteredUsers)">
                    Email <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = sortingCollection.SortByCity(FilteredUsers)">
                    City <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = sortingCollection.SortByCompanyName(FilteredUsers)">
                    Company Name <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var user in FilteredUsers)
            {
                <tr>
                    <td>@user.Id</td>
                    <td style=" transition: background-color 0.3s ease; font-weight: 500; background-color:aliceblue;">
                        <span style="display: flex; align-items: center;">
                            <img @onclick="() => SpecificUser = (SpecificUser == user ? null : user)" style="padding-right:1rem; cursor: pointer; block-size: 20px; display: flex; align-items: center;" src="Images/PlusSign.png" />
                            @if (FromSavedFile)
                            {
                                <img @onclick="()=>RemoveUser(user)" style="padding-right:1rem; cursor: pointer; block-size: 20px; display: flex; align-items: center;" src="Images/MinusSign.png" />
                            }
                            @user.Name

                        </span>
                    </td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.Address.City</td>
                    <td>@user.Company.Name</td>
                </tr>

                @if (SpecificUser == user)
                {
                    <tr>
                        <td colspan="6">
                            <div style="background-color: #f8f9fa; padding: 10px; border: 1px solid #ddd;">
                                <UserInfoForSpecificUser IfEditUserChanged="(editUserShow)=>IfEditUser=editUserShow" FromSavedFile="FromSavedFile" FromApi="FromApi" IfShowToDoListChanged="(todoListShow)=>IfShowToDoList = todoListShow" SpecificUser="@SpecificUser" />
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <SearchInputAndMessage UsersLeftToShowChanged="(usersLeft)=>_usersLeftToShow=usersLeft" SearchingChanged="(search)=> Searching = search "
                           AmountOfUsers="AmountOfUsers"
                           SearchTermChanged="(term) => SearchTerm = term"
                           TextMessageChanged="(message) => TextMessage = message"
                           Users="@Users"
                           FilteredUsersChanged="(x) => FilteredUsers = x" />
    @if (_saveToList)
    {
        <button @onclick="SaveChanges" style="background-color: #007bff; color: white; border: none; padding: 10px 20px; cursor: pointer; transition: background-color 0.3s ease; font-weight: 500; border-radius: 5px;">Save changes</button>
        <button @onclick="GoBack" style="background-color: #007bff; color: white; border: none; padding: 10px 20px; cursor: pointer; transition: background-color 0.3s ease; font-weight: 500; border-radius: 5px;">Discard changes</button>
        <span style="color: #007bff; font-weight: bold;">
            @_messageWhenSaved
        </span>
    }
    
} 
@if (_usersLeftToShow!=0&&!IfShowToDoList && !IfEditUser&&!Searching)
{
    <h1 class="cool-header">There are @_usersLeftToShow users left to show</h1>
}
@if (IfShowToDoList && !IfEditUser)
{
    <div style="display: fixed;">
        <TodoList IfShowTodoListChanged="(show)=>IfShowToDoList=show" Users="Users" SpecificUser="SpecificUser" />
    </div>

}
@if (IfEditUser)
{
    <EditUser IfEditUserChanged="(change)=>IfEditUser=change" Users="Users" SpecificUser="SpecificUser"></EditUser>
}

@code {

    [Parameter]
    public bool FromSavedFile { get; set; }
    [Parameter]
    public List<User> FilteredUsers { get; set; } = new List<User>();
    [Parameter]
    public List<User> Users { get; set; } = new();
    [Parameter]
    public bool FromApi { get; set; }

    SortingCollection sortingCollection = new SortingCollection();
    ILocalDataAccess userCollection = new UserCollection();

    public bool Searching { get; set; }
    public bool IfShowToDoList = false;
    public bool IfEditUser = false;

    private bool _saveToList = false;
    private bool _ifShowAllUsers = false;
    private bool _ifRemoveUser;

    private List<User> _copyOfList { get; set; } = new();
    private string _messageWhenSaved = "";
    private int _usersLeftToShow { get; set; }

    public User? SpecificUser { get; set; } = new();

    public string? TextMessage { get; set; } = String.Empty;
    public string? SearchTerm { get; set; } = String.Empty;
    public int AmountOfUsers = 5;

    protected override void OnInitialized()
    {
        if (Users.Count>5)
        {
            _usersLeftToShow = Users.Count - AmountOfUsers;
        }
        FilteredUsers = Users.Take(AmountOfUsers).ToList();
        _copyOfList.AddRange(Users);
    }

    private void IncreaseAmountOfUsers()
    {
        if (Users.Count > AmountOfUsers + 5)
        {
            AmountOfUsers += 5;
            FilteredUsers = Users.Take(AmountOfUsers).ToList();
            _usersLeftToShow = Users.Count - AmountOfUsers;
        }
        else
        {
            AmountOfUsers = AmountOfUsers + (Users.Count - AmountOfUsers);
            FilteredUsers = Users.Take(AmountOfUsers).ToList();
            _usersLeftToShow = Users.Count - AmountOfUsers;
        }
        if (FilteredUsers.Count == Users.Count)
        {
            _ifShowAllUsers = true;
        }
    }

    private void ShowAllUsers()
    {
        _ifShowAllUsers = true;
        AmountOfUsers = Users.Count();
        FilteredUsers = Users.Take(AmountOfUsers).ToList();
        _usersLeftToShow = 0;
    }

    private void ShowOnlyFiveUsers()
    {
        FilteredUsers = Users.Take(5).ToList();
        _ifShowAllUsers = false;
        AmountOfUsers = 5;
        _usersLeftToShow = Users.Count - AmountOfUsers;
    }

    public void RemoveUser(User user)
    {
        int number = user.Id;
        _ifRemoveUser = true;
        Users.Remove(user);
        FilteredUsers = Users.Take(AmountOfUsers).ToList();
        UpdateIndexValueOfUsers();

        _saveToList = true;
        if (_usersLeftToShow>0)
        {
            _usersLeftToShow -= 1;
        }
    }

    public async Task SaveChanges()
    {
        Users.Clear();
        Users.AddRange(FilteredUsers);
        SaveAsJson();
        _messageWhenSaved = "Changes saved!";
        await Task.Delay(2000);
        _messageWhenSaved = "";
        _saveToList = false;
        CheckIfListIsEmpty();
        _ifRemoveUser = false;
    }

    public void GoBack()
    {
        Users = _copyOfList.Take(_copyOfList.Count).ToList();
        FilteredUsers = Users.Take(AmountOfUsers).ToList();
        UpdateIndexValueOfUsers();
        _saveToList = false;
        
            _usersLeftToShow = Users.Count-FilteredUsers.Count;
        
        
        _ifRemoveUser = false;
    }

    public void SaveAsJson()
    {
        var json = JsonSerializer.Serialize<List<User>>(Users);
        File.WriteAllText("List_Of_People_Save.json", json);
    }

    public void UpdateIndexValueOfUsers()
    {
        int count = 1;
        foreach (var item in FilteredUsers)
        {
            item.Id = count;
            count++;
        }
    }

    public void CheckIfListIsEmpty()
    {
        if (FilteredUsers.Count <= 0)
        {
            FromSavedFile = false;
            Users = userCollection.GetUsersFromInternalDb();
            FilteredUsers = Users.Take(5).ToList();
        }
    }
}