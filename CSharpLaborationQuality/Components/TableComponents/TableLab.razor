@page "/Table"
@using BlazorClassLibrary
@using BlazorClassLibrary.Collections
@using System.Text.Json
@using BlazorClassLibrary.Collections.Interfaces
@rendermode InteractiveServer
@if (!IfShowToDoList && !IfEditUser)
{
    <div class="cool-message">@_message</div>

   <br />
    <div style="display: flex; align-items: center; justify-content: center; margin:0.3rem;">

        <select @onchange="FetchUsers" class="cool-dropdown">
            @foreach (SourceType source in Enum.GetValues(typeof(SourceType)))
            {
                <option value="@source">@source</option>
            }
        </select>
    </div>

   
    <div style="padding-bottom: 1rem; display: flex; justify-content:center; align-items: center;" class="button-container">
       
    </div>
    @if(Users.Count>5)
        {
             <div style=" padding-bottom: 1rem; display: flex; justify-content:center; align-items: center;">
            <button class="styled-button" @onclick="ShowAllUsers">@_buttonName</button>

        </div>
        }
       

    <div style="display: flex; justify-content:center; align-items: center;">
        <SearchInputAndMessage UsersLeftToShowChanged="(usersLeft) => _usersLeftToShow = usersLeft"
                               SearchingChanged="(search) => Searching = search"
                               AmountOfUsers="_amountOfUsers"
                               SearchTermChanged="(term) => SearchTerm = term"
                               TextMessageChanged="(message) => TextMessage = message"
                               Users="@Users"
                               FilteredUsersChanged="(users) => FilteredUsers = users" />
    </div>

    <table class="table table-hover">
        <thead class="thead-dark">
            <tr>
                <th class="clickable-header" style="cursor: pointer; font-weight: 500; background-color: aliceblue; width: 100px;" @onclick="() => FilteredUsers = SortByProperty(FilteredUsers, user => user.Id)">
                    Id <img style="width: 20px; height: 20px; margin-left: 10px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color: aliceblue; " @onclick="()=> FilteredUsers = SortByProperty(FilteredUsers, user => user.Name)">
                    Name <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = SortByProperty(FilteredUsers, user => user.UserName)">
                    Username <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = SortByProperty(FilteredUsers, user => user.Email)">
                    Email <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = SortByProperty(FilteredUsers, user => user.Address.City)">
                    City <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
                <th class="clickable-header" style="cursor: pointer; transition: background-color 0.3s ease; font-weight: 500;background-color:aliceblue; " @onclick="()=> FilteredUsers = SortByProperty(FilteredUsers, user => user.Company.Name)">
                    Company Name <img style="width: 20px; height: 20px; margin-left: 50px;" src="Images\ArrowUpAndDown.png" />
                </th>
            </tr>
        </thead>
        <tbody>

            @foreach (var user in FilteredUsers)
            {
                <tr>
                    <td>@user.Id</td>
                    <td style=" transition: background-color 0.3s ease; font-weight: 500; background-color:aliceblue;">
                        <span style="display: flex; align-items: center;">
                            <img @onclick="() => SpecificUser = (SpecificUser == user ? null : user)" style="padding-right:1rem; cursor: pointer; block-size: 20px; display: flex; align-items: center;" src="Images/PlusSign.png" />
                            @if (_fromSavedFile)
                            {
                                <img @onclick="()=>RemoveUser(user)" style="padding-right:1rem; cursor: pointer; block-size: 20px; display: flex; align-items: center;" src="Images/MinusSign.png" />
                            }
                            @user.Name

                        </span>
                    </td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.Address.City</td>
                    <td>@user.Company.Name</td>
                </tr>

                @if (SpecificUser == user)
                {
                    <tr>
                        <td colspan="6">
                            <div class="roll-down" style="background-color: #f8f9fa; padding: 10px; border: 1px solid #ddd;">
                                <UserInfoForSpecificUser IfEditUserChanged="(editUserShow)=>IfEditUser=editUserShow" FromSavedFile="_fromSavedFile" FromApi="_fromApi" IfShowToDoListChanged="(todoListShow)=>IfShowToDoList = todoListShow" SpecificUser="@SpecificUser" />
                            </div>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    @if (_saveToList)
    {
        <button @onclick="SaveChanges" style="background-color: #007bff; color: white; border: none; padding: 10px 20px; cursor: pointer; transition: background-color 0.3s ease; font-weight: 500; border-radius: 5px;">Save changes</button>
        <button @onclick="GoBack" style="background-color: #007bff; color: white; border: none; padding: 10px 20px; cursor: pointer; transition: background-color 0.3s ease; font-weight: 500; border-radius: 5px;">Discard changes</button>
        <span style="color: #007bff; font-weight: bold;">
           
        </span>
    }
    @_messageWhenSaved
} 
@if (_usersLeftToShow!=0&&!IfShowToDoList && !IfEditUser&&!Searching)
{
    <h1 class="cool-header">There are @_usersLeftToShow users left to show</h1>
}
@if (IfShowToDoList && !IfEditUser)
{
    <div style="display: fixed;">
        <TodoList IfShowTodoListChanged="(show)=>IfShowToDoList=show" Users="Users" SpecificUser="SpecificUser" />
    </div>

}
@if (IfEditUser)
{
    <EditUser IfEditUserChanged="(change)=>IfEditUser=change" Users="Users" SpecificUser="SpecificUser"></EditUser>
}

@code {
    public List<User> Users { get; set; } = new();
    public List<User> FilteredUsers { get; set; } = new List<User>();

    ILocalDataAccess UserCollection = new UserCollection();
    IRemoteDataAccess Api = new ApiCollection();

    private bool _fromSavedFile = true;
    private bool _fromApi = false;
    private bool _saveToList = false;
    private bool _ifShowAllUsers { get; set; }
    private bool _ifRemoveUser { get; set; }

    private enum SourceType
    {
        MockUsers,
        ApiUsers
    }

    private int _amountOfUsers = 5;
    private int _usersLeftToShow { get; set; }

    private List<User> _copyOfList { get; set; } = new();

    private string _messageWhenSaved = "";
    private string _buttonName = "Show more";
    private string _message = "";

    public bool Searching { get; set; }
    public bool IfShowToDoList = false;
    public bool IfEditUser = false;

    public string? TextMessage { get; set; } = String.Empty;
    public string? SearchTerm { get; set; } = String.Empty;

    public User? SpecificUser { get; set; } = new();

    protected override void OnInitialized()
    {
        if (UserCollection.GetUsers().Count == 0)
        {
            Users = UserCollection.GetUsersFromInternalDb();
            _fromSavedFile = false;
            _message = "No created users found, fetching from an already established list";
        }
        else
        {
            Users = UserCollection.GetUsers();
            _message = "";
        }
        FilteredUsers = Users.Take(5).ToList();
        CheckUsersLeftToShow();
    }
    private async Task FetchUsers(ChangeEventArgs e)
    {
        if (e.Value.ToString() == SourceType.MockUsers.ToString())
        {
            if (UserCollection.GetUsers().Count == 0)
            {
                Users = UserCollection.GetUsersFromInternalDb();
                _fromSavedFile = false;
                _message = "No created users found, fetching from an already established list";
            }

            else
            {
                Users = UserCollection.GetUsers();
                _fromSavedFile = true;
                _message = "";
            }

            FilteredUsers = Users.Take(_amountOfUsers).ToList();
            _fromApi = false;
        }

        else if (e.Value.ToString() == SourceType.ApiUsers.ToString())
        {
            Users = await Api.GetUsers();
            FilteredUsers = Users.Take(_amountOfUsers).ToList();
            _fromSavedFile = false;
            _fromApi = true;
            _message = "";
        }
        CheckUsersLeftToShow();
    }

    private void CheckUsersLeftToShow()
    {
        if (Users.Count - _amountOfUsers < 0)
        {
            _usersLeftToShow = 0;
        }
        else
        {
            _usersLeftToShow = Users.Count - _amountOfUsers;
        }
    }

    public List<T> SortByProperty<T>(List<T> users, Func<T, object> propertySelector)
    {
        var usersAscending = users.OrderBy(propertySelector).ToList();
        if (users.SequenceEqual(usersAscending))
        {
            return users.OrderByDescending(propertySelector).ToList();
        }
        return usersAscending;
    }

    private void ShowAllUsers()
    {
        if (_buttonName=="Show more")
        {
            _ifShowAllUsers = true;
            _amountOfUsers = Users.Count();
            FilteredUsers = Users.Take(_amountOfUsers).ToList();
            _usersLeftToShow = 0;
            _buttonName = "Show less";
        }
        else
        {
            ShowOnlyFiveUsers();
            _buttonName = "Show more";
        }
    }

    private void ShowOnlyFiveUsers()
    {
        FilteredUsers = Users.Take(5).ToList();
        _ifShowAllUsers = false;
        _amountOfUsers = 5;
        CheckUsersLeftToShow();
    }

    public void RemoveUser(User user)
    {
        int number = user.Id;
        _ifRemoveUser = true;
        FilteredUsers.Remove(user);
        UpdateIndexValueOfUsers();
        _saveToList = true;
        CheckUsersLeftToShow();
    }

    public async Task SaveChanges()
    {
        ReplaceUsersListWithFilteredUsers();
        SaveAsJson();
        _saveToList = false;
        _ifRemoveUser = false;
        await MessageChanged();
        CheckIfListIsEmpty();
        CheckUsersLeftToShow();
    }

    private async Task MessageChanged()
    {
        _messageWhenSaved = "Changes saved!";
        await Task.Delay(2000);
        _messageWhenSaved = "";
    }

    public void GoBack()
    {
        FilteredUsers = Users.Take(_amountOfUsers).ToList();
        UpdateIndexValueOfUsers();
        _saveToList = false;
         CheckUsersLeftToShow();
        _ifRemoveUser = false;
    }

    public void SaveAsJson()
    {
        var json = JsonSerializer.Serialize<List<User>>(Users);
        File.WriteAllText("List_Of_People_Save.json", json);
    }

    public void UpdateIndexValueOfUsers()
    {
        int count = 1;
        foreach (var item in FilteredUsers)
        {
            item.Id = count;
            count++;
        }
    }

    public void CheckIfListIsEmpty()
    {
        if (FilteredUsers.Count <= 0)
        {
            _fromSavedFile = false;
            Users = UserCollection.GetUsersFromInternalDb();
            FilteredUsers = Users.Take(5).ToList();
        }
    }

    public void ReplaceUsersListWithFilteredUsers()
    {
        Users.Clear();
        Users.AddRange(FilteredUsers);
    }
}