@using BlazorClassLibrary
@using BlazorClassLibrary.Collections
@rendermode InteractiveServer

<div class="input-container">
	<input style="font-family: Georgia; width:20rem;" @bind-value="_searchTerm" @oninput="SearchForUser" placeholder="Search for a user's name" class="styled-input" />
<p style="font-family: Georgia; font-weight: 500;">@_textMessage</p>
</div>

@code {
	[Parameter]
	public EventCallback<string> SearchTermChanged { get; set; }
	[Parameter]
	public EventCallback<string> TextMessageChanged { get; set; }
	[Parameter]
	public EventCallback<bool> SearchingChanged { get; set; }
	[Parameter]
	public EventCallback<int> UsersLeftToShowChanged { get; set; }
	[Parameter]
	public EventCallback<List<User>> FilteredUsersChanged { get; set; }


	[Parameter]
	public List<User> Users { get; set; } = [];
	[Parameter]
	public int AmountOfUsers { get; set; }
	
	private List<User>? _filteredUsers;

	private int _usersLeftToShow;

	private bool _searching;

	private string? _searchTerm;
	private string? _textMessage;

	private void SearchForUser(ChangeEventArgs e)
	{
		_searching = true;
		SearchingChanged.InvokeAsync(_searching);
		_searchTerm = e.Value?.ToString() ?? "";
		SearchTermChanged.InvokeAsync(_searchTerm);

		if (!Users.Any())
		{
			_textMessage = "Nothing found!";
			TextMessageChanged.InvokeAsync(_textMessage);
		}
		else if (_searchTerm==string.Empty)
		{
			_searching = false;
			SearchingChanged.InvokeAsync(_searching);

			_filteredUsers = Users.Take(AmountOfUsers).ToList();
			FilteredUsersChanged.InvokeAsync(_filteredUsers);

			_usersLeftToShow = Users.Count - _filteredUsers.Count;
			UsersLeftToShowChanged.InvokeAsync(_usersLeftToShow);
			
			_textMessage = $"";
			TextMessageChanged.InvokeAsync(_textMessage);
		}
		else
		{
			FoundUser();
		}
	}
	public void FoundUser()
	{
		if (!string.IsNullOrEmpty(_searchTerm))
		{
			_filteredUsers = Users.Where(item => item.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
			FilteredUsersChanged.InvokeAsync(_filteredUsers);
			_usersLeftToShow = Users.Count - _filteredUsers.Count;
			UsersLeftToShowChanged.InvokeAsync(_usersLeftToShow);
		}
		
		if (_filteredUsers != null)
		{
			if (_filteredUsers.Count > 0)
			{
				ListBiggerThanZero();
			}
			else
			{
				_textMessage = $"No users found with the term '{_searchTerm}'";
				TextMessageChanged.InvokeAsync(_textMessage);
			}
		}
	}
	public void ListBiggerThanZero()
	{
		if (_searchTerm == String.Empty)
		{
			_textMessage = "";
			TextMessageChanged.InvokeAsync(_textMessage);
		}
		else
		{
			_textMessage = $"Following users found with the term '{_searchTerm}'";
			TextMessageChanged.InvokeAsync(_textMessage);
		}
	}
}
